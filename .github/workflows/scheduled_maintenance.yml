name: Nightly Scheduled Maintenance
concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true
permissions:
  contents: write
  issues: write
  pull-requests: write
on:
  schedule:
    - cron: "0 0 * * *" # every day at 1AM
  workflow_dispatch: {}

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  USER_EMAIL: ${{ secrets.PR_USER_EMAIL }}
  USER_NAME: ${{ secrets.PR_USERNAME }}
  APPLY_FIXES: all
  APPLY_FIXES_EVENT: all
  APPLY_FIXES_MODE: pull_request
  CLEAR_REPORT_FOLDER: true
  JAVASCRIPT_DEFAULT_STYLE: prettier
  JSON_REPORTER: true
  JSON_REPORTER_OUTPUT_DETAIL: detailed
  LOG_LEVEL: warning
  MARKDOWN_DEFAULT_STYLE: markdownlint
  MEGALINTER_CONFIG: ./.config/.mega-linter.yml
  PRINT_ALL_FILES: true
  PRINT_ALPACA: true
  SARIF_REPORTER: true
  SHOW_ELAPSED_TIME: true
  SHOW_SKIPPED_LINTERS: true
  TAP_REPORTER: true
  TAP_REPORTER_SUB_FOLDER: tap
  TERRAFORM_CHECKOV_ARGUMENTS: --include-all-checkov-policies
  TERRAFORM_CHECKOV_CLI_LINT_MODE: file
  TERRAFORM_TERRASCAN_ARGUMENTS: "--show-passed"
  TERRAFORM_TFLINT_ARGUMENTS: --color
  TYPESCRIPT_DEFAULT_STYLE: prettier
  VALIDATE_ALL_CODEBASE: true

jobs:
  terraform-docs:
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.2
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Render terraform docs inside the README.MD and push changes back to PR branch
        uses: terraform-docs/gh-actions@v1.3.0
        with:
          config-file: "/.config/.readme-terraform-docs.yml"
          find-dir: .
          git-commit-message: "[Terraform-docs] Updated readme.MD"
          git-push: true
          git-push-sign-off: true
          git-push-user-email: CAG-terraform-docs@ca-grp.com
          git-push-user-name: CAG-terraform-docs
          indention: 3
          output-file: README.MD
          template: "<!-- start_of_terraform_docs -->\n{{ .Content }}\n<!-- end_of_terraform_docs -->"

      - name: Render terraform docs inside the TERRAFORM.MD and push changes back to PR branch
        uses: terraform-docs/gh-actions@v1.3.0
        with:
          config-file: "/.config/.terraform-terraform-docs.yml"
          find-dir: .
          git-commit-message: "[Terraform-docs] Updated TERRAFORM.MD"
          git-push: true
          git-push-sign-off: true
          git-push-user-email: CAG-terraform-docs@ca-grp.com
          git-push-user-name: CAG-terraform-docs
          indention: 2
          output-file: TERRAFORM.MD
          template: "<!-- start_of_terraform_docs -->\n{{ .Content }}\n<!-- end_of_terraform_docs -->"

  megalinter:
    if: (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch') && !cancelled() && (needs.terraform-docs.result == 'success' || needs.terraform-docs.result == 'failure')
    needs: terraform-docs
    name: MegaLinter
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4.2.2
        with:
          token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}

      - name: MegaLinter
        id: ml
        uses: oxsecurity/megalinter@v8.4.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4.6.1
        with:
          name: MegaLinter reports
          path: |
            megalinter-reports
            mega-linter.log

      - name: Create Pull Request with applied fixes
        id: cpr
        if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'pull_request' && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && !contains(github.event.head_commit.message, 'skip fix')
        uses: peter-evans/create-pull-request@v7.0.6
        with:
          body: |
            <!---
            5 Tips to creating a (good) pull request

            1. Keep it short - add/change/fix/remove what you came for!

            2. Add more information - explain what you've done, what, why, provide supportive material and link to related pull requests/issues

            3. Comment your code, please.

            4. Assign people or groups as reviewers - encourage peer review

            5. Let your colleagues know your PR is ready for review

            --->

            ## What?
            <!--- Explain what the pull request is for. it doesn't need to be technical --->

            Linting fixes

            ## Why?
            <!--- what goal does this pull request fulfill --->

            There have been fixes automatically generated by Megalinter

            ## How?
            <!--- Meaningful explanation of how you achieved the goal --->

            Auto-generated by [create-pull-request][1] and [Megalinter][2]

            ## Related
            <!--- Links to related isses/PBIs please specify if the pr will close them. referenced toany other related PR --->

            Please see the previous run of Nightly Scheduled Maintenance against [Module_Name](https://github.com/constellationautomotivegroup/Module_Name/actions/workflows/scheduled_maintenance.yml)

            ## Testing?
            <!--- Please include details of any relevant testing and the results --->

            N/A

            ## Screenshots (optional)
            <!--- terraform plans, UI changes etc--->

            N/A

            ## Anything Else?
            <!--- You may want to delve into possible architecture changes or technical debt here. Call out challenges, optimizations, etc. --->

            [1]: https://github.com/peter-evans/create-pull-request
            [2]: https://github.com/oxsecurity/megalinter
          branch: fix/megalinter-automatic-fixes
          committer: CAG-megalinter-bot <megalinter@ca-grp.com>
          commit-message: "[MegaLinter] Apply linters automatic fixes"
          delete-branch: true
          labels: bot
          title: "[MegaLinter] Apply linters automatic fixes"
          token: ${{ secrets.PAT || secrets.GITHUB_TOKEN }}

      - name: Create PR output
        if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'pull_request' && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && !contains(github.event.head_commit.message, 'skip fix')
        run: |
          echo "Pull Request Number - ${{ steps.cpr.outputs.pull-request-number }}"
          echo "Pull Request URL - ${{ steps.cpr.outputs.pull-request-url }}"

      - name: Prepare commit
        if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'commit' && github.ref != 'refs/heads/main' && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && !contains(github.event.head_commit.message, 'skip fix')
        run: sudo chown -Rc $UID .git/

      - name: Commit and push applied linter fixes
        if: steps.ml.outputs.has_updated_sources == 1 && (env.APPLY_FIXES_EVENT == 'all' || env.APPLY_FIXES_EVENT == github.event_name) && env.APPLY_FIXES_MODE == 'commit' && github.ref != 'refs/heads/main' && (github.event_name == 'push' || github.event.pull_request.head.repo.full_name == github.repository) && !contains(github.event.head_commit.message, 'skip fix')
        uses: stefanzweifel/git-auto-commit-action@v5.1.0
        with:
          branch: ${{ github.event.pull_request.head.ref || github.head_ref || github.ref }}
          commit_message: "[MegaLinter] Apply linters fixes"
          commit_user_name: CAG-megalinter-bot
          commit_user_email: megalinter@ca-grp.com
