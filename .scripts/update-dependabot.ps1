
[CmdletBinding()] # indicate that this is advanced function (with additional params automatically added)
param (
    [string] $interval = 'daily', # default = every day
    [string] $outputFile = '../.github/dependabot.yml', # default = ../.github/dependabot.yml
    [Int] $prLimit = 100, # default = 100
    [string] $targetBranch = 'main', # default = main
    [string] $time = '00:00', # default = 00:00
    [string] $timeZone = 'Europe/London' # default = Europe/London
)

$files = Get-ChildItem -Path '..' -Recurse

function packageEcosystem() {
    param (
        [string] $ecosystem,
        [string] $group = $ecosystem + ":", # default = ecosystem:
        #[string] $interval = 'daily', # default = every day
        [Int] $prLimit = 100, # default = 100
        [string] $relPath
        #[string] $targetBranch = 'main', # default = main
        #[string] $time = '00:00', # default = 00:00
        #[string] $timeZone = 'Europe/London' # default = Europe/London
    )

    $block = @"
  - package-ecosystem: "$ecosystem"
    directory: "$relPath"
    groups:
      $group
        patterns:
            - "*" # A wildcard that matches all dependencies in the package
    open-pull-requests-limit: $prLimit
    schedule:
      interval: "$interval"
      time: "$time"
      timezone: "$timeZone"
    target-branch: "$targetBranch"
"@

    return $block
}

$output = @"
# This file is auto-generated by /.scripts/update-dependabot.ps1
version: 2
enable-beta-ecosystems: true
updates:
  - package-ecosystem: "github-actions"
    directory: "/.github/workflows"
    groups:
      actions:
        patterns:
          - "*" # A wildcard that matches all dependencies in the package
    open-pull-requests-limit: $prLimit
    schedule:
      interval: "$interval"
      time: "$time"
      timezone: "$timeZone"
    target-branch: "$targetBranch"


"@

foreach ($file in $files) {
    $relPath = Resolve-Path -Relative $($file.FullName) | Split-Path -Parent
    $relPath = $relPath -replace '..', '/' # replace leading .. with /

    if ($file.Name -eq 'versions.tf') {
        Write-Output "Found versions.tf in $($file.FullName)"
        $ecosystem = 'terraform'
        $group = $file.directory.Name + ":"
        $block = packageEcosystem -ecosystem $ecosystem `
            -relpath $relPath `
            -group $group `
            -targetBranch "$targetBranch"
        $output += "`r`n" + $block
    }
    elseif ($file.Name -eq 'providers.tf') {
        Write-Output "Found providers.tf in $($file.FullName)"
        $ecosystem = 'terraform'
        $group = $file.directory.Name + ":"
        $block = packageEcosystem -ecosystem $ecosystem `
            -relpath $relPath `
            -group $group `
            -targetBranch "$targetBranch"
        $output += "`r`n" + $block
    }
    elseif ($file.Name -eq 'main.tf') {
        Write-Output "Found main.tf in $($file.FullName)"
        $ecosystem = 'terraform'
        $group = $file.directory.Name + ":"
        $block = packageEcosystem -ecosystem $ecosystem `
            -relpath $relPath `
            -group $group `
            -targetBranch "$targetBranch"
        $output += "`r`n" + $block
    }
    elseif ($file.Name -eq 'Dockerfile') {
        Write-Output "Found Dockerfile in $($file.FullName)"
        $ecosystem = 'docker'
        $group = $file.directory.Name + ":"
        $block = packageEcosystem -ecosystem $ecosystem `
            -relpath $relPath `
            -group $group `
            -targetBranch "$targetBranch"
        $output += "`r`n" + $block
    }
    elseif ($file.Name -eq 'package.json') {
        Write-Output "Found package.json in $($file.FullName)"
        $ecosystem = 'npm'

        $block = packageEcosystem -ecosystem $ecosystem `
            -relpath $relPath `
            -targetBranch "$targetBranch"

        # NPM uses a customized package-ecosystem block
        $block += "`r`n" + @'
  allow:
  - dependency-type: direct
  - dependency-type: production # check only dependencies, which are going to the compiled app, not supporting tools like @vue-cli
'@
        $output += "`r`n" + $block
    }
    elseif ($file.Name -like '*.sln') {
        Write-Output "Found *.sln in $($file.FullName)"
        $ecosystem = 'nuget'
        $group = $file.directory.Name + ":"
        $block = packageEcosystem -ecosystem $ecosystem `
            -relpath $relPath `
            -group $group `
            -targetBranch "$targetBranch"
        $output += "`r`n" + $block
    }
}

if ($outputFile -ne '') {
    Write-Output "*** Writing output to $outputFile"
    $output | Out-File -FilePath $outputFile -Encoding UTF8
}
else {
    Write-Output $output
}
